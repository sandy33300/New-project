{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1GLd8bV-ivzjhVEezRMN1H-7F-DDxYVgA","timestamp":1743481654455}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":177},"id":"RHcSDxbnegX4","executionInfo":{"status":"ok","timestamp":1743429575869,"user_tz":-330,"elapsed":7370,"user":{"displayName":"Navaneeth Sankaran","userId":"07405325203740759790"}},"outputId":"db9f62c7-8e8e-43e7-fe38-d788ae6aef53"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-bad8080f-217a-4b8a-985f-4b75456253c3\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-bad8080f-217a-4b8a-985f-4b75456253c3\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving dataset.csv to dataset (1).csv\n","Name          0\n","Age           4\n","Marks         4\n","Attendance    4\n","Passed        0\n","dtype: int64\n"]}],"source":["import pandas as pd\n","from google.colab import files\n","uploaded = files.upload()  # Upload your CSV file\n","df = pd.read_csv('dataset.csv') # Replace 'data.csv' with the actual file path\n","df.head()\n","# Now you can use df\n","print(df.isnull().sum())"]},{"cell_type":"code","source":["df_cleaned = df.dropna()  # Removes rows with missing values\n","print(df_cleaned)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y9F0sMSmgIX3","executionInfo":{"status":"ok","timestamp":1743429604115,"user_tz":-330,"elapsed":56,"user":{"displayName":"Navaneeth Sankaran","userId":"07405325203740759790"}},"outputId":"2a68265b-00eb-4a08-b32c-3e058e041bce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Name   Age  Marks  Attendance Passed\n","0   Alice  20.0   85.0        90.0    Yes\n","3   David  22.0   90.0        85.0    Yes\n","4     Eve  20.0   88.0        95.0     No\n","8     Ivy  24.0   92.0        92.0    Yes\n","12   Mona  21.0   83.0        80.0     No\n"]}]},{"cell_type":"code","source":["df[\"Age\"].fillna(df[\"Age\"].mean(), inplace=True)\n","df[\"Marks\"].fillna(df[\"Marks\"].median(), inplace=True)\n","df[\"Attendance\"].fillna(df[\"Attendance\"].mean(),\n","inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OPC3GFY4gMtu","executionInfo":{"status":"ok","timestamp":1743429623030,"user_tz":-330,"elapsed":11,"user":{"displayName":"Navaneeth Sankaran","userId":"07405325203740759790"}},"outputId":"b8da5334-05c5-425c-8212-37c4a5fd349c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-8-c2b18073338b>:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Age\"].fillna(df[\"Age\"].mean(), inplace=True)\n","<ipython-input-8-c2b18073338b>:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Marks\"].fillna(df[\"Marks\"].median(), inplace=True)\n","<ipython-input-8-c2b18073338b>:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Attendance\"].fillna(df[\"Attendance\"].mean(),\n"]}]},{"cell_type":"code","source":["df[\"Passed\"].fillna(df[\"Passed\"].mode()[0], inplace=True)"],"metadata":{"id":"DAk50MRage0Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.ffill(inplace=True)  # Forward fill\n","df.bfill(inplace=True)  # Backward fill"],"metadata":{"id":"gR7LqW43ghA8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.drop_duplicates(inplace=True)"],"metadata":{"id":"KPGyvRwXgnPI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","scaler = StandardScaler()\n","df_scaled = df.copy()\n","df_scaled[[\"Marks\", \"Attendance\"]] = scaler.fit_transform(df[[\"Marks\", \"Attendance\"]])\n","print(df_scaled)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T4NYzepDgrAE","executionInfo":{"status":"ok","timestamp":1743429774901,"user_tz":-330,"elapsed":1042,"user":{"displayName":"Navaneeth Sankaran","userId":"07405325203740759790"}},"outputId":"58401d8d-77d8-4d7e-c27f-9f72474cce6a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       Name   Age     Marks  Attendance Passed\n","0     Alice  20.0  0.505490    0.804154    Yes\n","1       Bob  21.0 -0.168497   -0.888802     No\n","2   Charlie  22.0 -1.067146    0.000000    Yes\n","3     David  22.0  1.628802   -0.042324    Yes\n","4       Eve  20.0  1.179478    1.650632     No\n","5     Frank  22.0 -1.516471   -2.581758    Yes\n","6     Grace  23.0 -0.168497    0.465563     No\n","7      Hank  21.0 -0.617822    0.000000    Yes\n","8       Ivy  24.0  2.078127    1.142745    Yes\n","9      Jack  22.0 -0.842484   -0.042324     No\n","10    Kelly  22.0 -0.168497   -1.227393    Yes\n","11      Leo  23.0  0.954815    0.000000    Yes\n","12     Mona  21.0  0.056166   -0.888802     No\n","13     Nina  22.0 -1.291809    0.634858    Yes\n","14    Oscar  25.0 -0.168497    0.973450     No\n","15     Paul  22.0 -0.393159    0.000000    Yes\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","df_scaled[[\"Marks\", \"Attendance\"]] = scaler.fit_transform(df[[\"Marks\", \"Attendance\"]])\n","print(df_scaled)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K41h4syRg2dT","executionInfo":{"status":"ok","timestamp":1743429822727,"user_tz":-330,"elapsed":37,"user":{"displayName":"Navaneeth Sankaran","userId":"07405325203740759790"}},"outputId":"39431016-1b1f-42e8-fe21-9060acf0ae53"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       Name   Age   Marks  Attendance Passed\n","0     Alice  20.0  0.5625        0.80    Yes\n","1       Bob  21.0  0.3750        0.40     No\n","2   Charlie  22.0  0.1250        0.61    Yes\n","3     David  22.0  0.8750        0.60    Yes\n","4       Eve  20.0  0.7500        1.00     No\n","5     Frank  22.0  0.0000        0.00    Yes\n","6     Grace  23.0  0.3750        0.72     No\n","7      Hank  21.0  0.2500        0.61    Yes\n","8       Ivy  24.0  1.0000        0.88    Yes\n","9      Jack  22.0  0.1875        0.60     No\n","10    Kelly  22.0  0.3750        0.32    Yes\n","11      Leo  23.0  0.6875        0.61    Yes\n","12     Mona  21.0  0.4375        0.40     No\n","13     Nina  22.0  0.0625        0.76    Yes\n","14    Oscar  25.0  0.3750        0.84     No\n","15     Paul  22.0  0.3125        0.61    Yes\n"]}]},{"cell_type":"code","source":["df_encoded = pd.get_dummies(df, columns=[\"Passed\"],\n","drop_first=True)\n","print(df_encoded)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r2Z6Bw2PhCFM","executionInfo":{"status":"ok","timestamp":1743429841396,"user_tz":-330,"elapsed":13,"user":{"displayName":"Navaneeth Sankaran","userId":"07405325203740759790"}},"outputId":"e7f6ba70-a1ac-4324-9d2d-883c78c4b158"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       Name   Age  Marks  Attendance  Passed_Yes\n","0     Alice  20.0   85.0       90.00        True\n","1       Bob  21.0   82.0       80.00       False\n","2   Charlie  22.0   78.0       85.25        True\n","3     David  22.0   90.0       85.00        True\n","4       Eve  20.0   88.0       95.00       False\n","5     Frank  22.0   76.0       70.00        True\n","6     Grace  23.0   82.0       88.00       False\n","7      Hank  21.0   80.0       85.25        True\n","8       Ivy  24.0   92.0       92.00        True\n","9      Jack  22.0   79.0       85.00       False\n","10    Kelly  22.0   82.0       78.00        True\n","11      Leo  23.0   87.0       85.25        True\n","12     Mona  21.0   83.0       80.00       False\n","13     Nina  22.0   77.0       89.00        True\n","14    Oscar  25.0   82.0       91.00       False\n","15     Paul  22.0   81.0       85.25        True\n"]}]},{"cell_type":"code","source":["df_encoded = pd.get_dummies(df, columns=[\"Passed\"],\n","drop_first=True)\n","print(df_encoded)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XycZhxdyhEvQ","executionInfo":{"status":"ok","timestamp":1743429856146,"user_tz":-330,"elapsed":19,"user":{"displayName":"Navaneeth Sankaran","userId":"07405325203740759790"}},"outputId":"20ad9573-43e6-4d56-a492-3c8f949d71e2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       Name   Age  Marks  Attendance  Passed_Yes\n","0     Alice  20.0   85.0       90.00        True\n","1       Bob  21.0   82.0       80.00       False\n","2   Charlie  22.0   78.0       85.25        True\n","3     David  22.0   90.0       85.00        True\n","4       Eve  20.0   88.0       95.00       False\n","5     Frank  22.0   76.0       70.00        True\n","6     Grace  23.0   82.0       88.00       False\n","7      Hank  21.0   80.0       85.25        True\n","8       Ivy  24.0   92.0       92.00        True\n","9      Jack  22.0   79.0       85.00       False\n","10    Kelly  22.0   82.0       78.00        True\n","11      Leo  23.0   87.0       85.25        True\n","12     Mona  21.0   83.0       80.00       False\n","13     Nina  22.0   77.0       89.00        True\n","14    Oscar  25.0   82.0       91.00       False\n","15     Paul  22.0   81.0       85.25        True\n"]}]},{"cell_type":"code","source":["def performance_category(marks):\n","    if marks >= 85:\n","        return \"High\"\n","    elif marks >= 70:\n","        return \"Medium\"\n","    else:\n","        return \"Low\"\n","\n","df[\"Performance\"] = df[\"Marks\"].apply(performance_category)\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_uOoS_hnhH9F","executionInfo":{"status":"ok","timestamp":1743429877397,"user_tz":-330,"elapsed":40,"user":{"displayName":"Navaneeth Sankaran","userId":"07405325203740759790"}},"outputId":"8b5e6b89-c85e-4938-9215-978fdf2c10af"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       Name   Age  Marks  Attendance Passed Performance\n","0     Alice  20.0   85.0       90.00    Yes        High\n","1       Bob  21.0   82.0       80.00     No      Medium\n","2   Charlie  22.0   78.0       85.25    Yes      Medium\n","3     David  22.0   90.0       85.00    Yes        High\n","4       Eve  20.0   88.0       95.00     No        High\n","5     Frank  22.0   76.0       70.00    Yes      Medium\n","6     Grace  23.0   82.0       88.00     No      Medium\n","7      Hank  21.0   80.0       85.25    Yes      Medium\n","8       Ivy  24.0   92.0       92.00    Yes        High\n","9      Jack  22.0   79.0       85.00     No      Medium\n","10    Kelly  22.0   82.0       78.00    Yes      Medium\n","11      Leo  23.0   87.0       85.25    Yes        High\n","12     Mona  21.0   83.0       80.00     No      Medium\n","13     Nina  22.0   77.0       89.00    Yes      Medium\n","14    Oscar  25.0   82.0       91.00     No      Medium\n","15     Paul  22.0   81.0       85.25    Yes      Medium\n"]}]},{"cell_type":"code","source":["df[\"Age_Group\"] = pd.cut(df[\"Age\"], bins=[18, 21, 24],\n","labels=[\"Young\", \"Adult\"])\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pq0zM0LqhM-q","executionInfo":{"status":"ok","timestamp":1743429893149,"user_tz":-330,"elapsed":72,"user":{"displayName":"Navaneeth Sankaran","userId":"07405325203740759790"}},"outputId":"dd3d5ad1-24a1-464a-f00b-083ca1423044"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       Name   Age  Marks  Attendance Passed Performance Age_Group\n","0     Alice  20.0   85.0       90.00    Yes        High     Young\n","1       Bob  21.0   82.0       80.00     No      Medium     Young\n","2   Charlie  22.0   78.0       85.25    Yes      Medium     Adult\n","3     David  22.0   90.0       85.00    Yes        High     Adult\n","4       Eve  20.0   88.0       95.00     No        High     Young\n","5     Frank  22.0   76.0       70.00    Yes      Medium     Adult\n","6     Grace  23.0   82.0       88.00     No      Medium     Adult\n","7      Hank  21.0   80.0       85.25    Yes      Medium     Young\n","8       Ivy  24.0   92.0       92.00    Yes        High     Adult\n","9      Jack  22.0   79.0       85.00     No      Medium     Adult\n","10    Kelly  22.0   82.0       78.00    Yes      Medium     Adult\n","11      Leo  23.0   87.0       85.25    Yes        High     Adult\n","12     Mona  21.0   83.0       80.00     No      Medium     Young\n","13     Nina  22.0   77.0       89.00    Yes      Medium     Adult\n","14    Oscar  25.0   82.0       91.00     No      Medium       NaN\n","15     Paul  22.0   81.0       85.25    Yes      Medium     Adult\n"]}]}]}