{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPK7HeaHDcThGvGOv0jqdOI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"arS6EDglo5_b"},"outputs":[],"source":["\n","# Storing patient details\n","patient_name = \" santhosh \"\n","patient_age = 35\n","patient_weight_kg = 75\n","patient_height_m = 1.75\n","\n","# Calculating BMI\n","patient_bmi = patient_weight_kg / (patient_height_m ** 2)\n","\n","# Displaying patient details\n","print(f\"Patient Name: {patient_name}\")\n","print(f\"Age: {patient_age} years\")\n","print(f\"BMI: {patient_bmi:.2f}\")"]},{"cell_type":"code","source":["\n","# Function to determine BMI category\n","def determine_bmi_category(bmi):\n","    if bmi < 18.5:\n","        return \"Underweight\"\n","    elif 18.5 <= bmi < 24.9:\n","        return \"Normal weight\"\n","    elif 25 <= bmi < 29.9:\n","        return \"Overweight\"\n","    else:\n","        return \"Obese\"\n","\n","# Patient details\n","patient_name = \"John Doe\"\n","patient_age = 45\n","patient_bmi = 28.5\n","\n","# Determine BMI category\n","bmi_category = determine_bmi_category(patient_bmi)\n","\n","# Print the patient details along with BMI category\n","print(f\"Patient Name: {patient_name}\")\n","print(f\"Patient Age: {patient_age}\")\n","print(f\"Patient BMI: {patient_bmi}\")\n","print(f\"BMI Category: {bmi_category}\")"],"metadata":{"id":"MBT0pc_opEYm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","import numpy as np\n","\n","# Store a week's heart rate readings in a NumPy array (e.g., 7 readings, one for each day)\n","heart_rate_readings = np.array([72, 75, 68, 70, 74, 78, 69])\n","\n","# Calculate the average, highest, and lowest heart rate\n","average_heart_rate = np.mean(heart_rate_readings)\n","highest_heart_rate = np.max(heart_rate_readings)\n","lowest_heart_rate = np.min(heart_rate_readings)\n","\n","# Print the results\n","print(\"Average Heart Rate:\", average_heart_rate)\n","print(\"Highest Heart Rate:\", highest_heart_rate)\n","print(\"Lowest Heart Rate:\", lowest_heart_rate)"],"metadata":{"id":"7tMeFTkHpJxa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","import pandas as pd\n","\n","# Creating the DataFrame\n","data = {\n","    \"Name\": [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Emma\"],\n","    \"Age\": [45, 50, 38, 60, 55],\n","    \"Cholesterol\": [200, 220, 180, 250, 230]\n","}\n","\n","df = pd.DataFrame(data)\n","\n","# Display the DataFrame\n","print(df)"],"metadata":{"id":"2wVjVFIjpO1h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","import pandas as pd\n","\n","# Sample patient data\n","data = {\n","    'Patient_ID': [1, 2, 3, 4, 5],\n","    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n","    'Cholesterol': [180, 220, 190, 250, 210]\n","}\n","\n","# Create DataFrame\n","df = pd.DataFrame(data)\n","\n","# Set cholesterol threshold\n","threshold = 200\n","\n","# Filter patients above the threshold\n","high_cholesterol_patients = df[df['Cholesterol'] > threshold]\n","\n","# Display results\n","print(high_cholesterol_patients)"],"metadata":{"id":"vas2BsdipSxx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# Sample patient data: (Name, Weight in kg, Height in meters)\n","patients = [\n","    (\"Alice\", 68, 1.65),\n","    (\"Bob\", 85, 1.75),\n","    (\"Charlie\", 95, 1.80),\n","    (\"David\", 76, 1.70)\n","]\n","\n","# Function to calculate BMI\n","def calculate_bmi(weight, height):\n","    return weight / (height ** 2)\n","\n","# Add BMI to patient data\n","patients_with_bmi = [(name, weight, height, calculate_bmi(weight, height)) for name, weight, height in patients]\n","\n","# Sort patients by BMI in descending order\n","sorted_patients = sorted(patients_with_bmi, key=lambda x: x[3], reverse=True)\n","\n","# Print results\n","print(\"Patients sorted by BMI (highest to lowest):\")\n","for patient in sorted_patients:\n","    print(f\"{patient[0]} - BMI: {patient[3]:.2f}\")"],"metadata":{"id":"JFXTTbU8pbXZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","import pandas as pd\n","\n","# Example DataFrame\n","data = {'Patient_ID': [1, 2, 3, 4, 5],\n","        'BMI': [22, 27, 31, 24, 29],\n","        'Cholesterol': [180, 220, 250, 190, 240]}\n","\n","df = pd.DataFrame(data)\n","\n","# Function to classify risk\n","def classify_risk(row):\n","    if row['BMI'] >= 30 or row['Cholesterol'] >= 240:\n","        return \"High\"\n","    elif row['BMI'] >= 25 or row['Cholesterol'] >= 200:\n","        return \"Medium\"\n","    else:\n","        return \"Low\"\n","\n","# Apply classification\n","df['Risk_Level'] = df.apply(classify_risk, axis=1)\n","\n","print(df)"],"metadata":{"id":"F5W2gVTNpjKR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"CHfsVEX1pppH"},"execution_count":null,"outputs":[]}]}